@using System.Diagnostics
<div>
    <h3>Clock</h3>

    <div class="clock">
        <div class="clock-hand-separator"></div>
        <div
            class="minute-face clock-circular-face@(hideAnimations ? " no-transition" : "")"
            style="transform: rotate(@curSecondRotation)">
            <ul>
                @for (var i = 1; i <= 12; i++)
                {
                    var elementText = i * 5;
                    <li>@elementText.ToString("D2")</li>
                
                }
                @* <li>55</li> *@
                @* <li>50</li> *@
                @* <li>45</li> *@
                @* <li>40</li> *@
                @* <li>35</li> *@
                @* <li>30</li> *@
                @* <li>25</li> *@
                @* <li>20</li> *@
                @* <li>15</li> *@
                @* <li>10</li> *@
                @* <li>05</li> *@
                @* <li>60</li> *@
            </ul>
        </div>
        <div class="hour-face block-clock-face@(hideAnimations ? " no-transition" : "")"
             style="transform: rotate(@curMinuteRotation)">
            <div></div></div>
        @* <div class="hour-face circular-clock-face@(hideAnimations ? " no-transition" : "")" *@
        @*      style="transform: rotate(@curHourRotation)"></div> *@
    </div>
</div>

@code {  
    Timer updateTimer;

    string curSecondRotation = "0deg";
    string curMinuteRotation = "0deg";
    string curHourRotation = "0deg";

    int lastSecond = 0;
    int lastMinute = 0;
    int lastHour = 0;

    int fullSecondTurns = 0;
    int fullMinuteTurns = 0;
    int fullHourTurns = 0;
    
    bool hideAnimations = true;

    private void UpdateAbsoluteClockRotation()
    {
        var curTime = DateTime.Now;
        
        (curSecondRotation, fullSecondTurns) = GetUpdatedSecondSpinnerValues(
            curTime.Second, 
            lastSecond, 
            fullSecondTurns
            );
        
        (curMinuteRotation, fullMinuteTurns) = GetUpdatedMinuteSpinnerValues(
            curTime.Minute * 60 + curTime.Second, 
            lastMinute, 
            fullMinuteTurns
            );
        (curHourRotation, fullHourTurns) = GetUpdatedHourSpinnerValues(
            curTime.Hour * 3600 + curTime.Minute * 60 + curTime.Second, 
            lastMinute, 
            fullMinuteTurns
        );

        lastSecond = curTime.Second;
    }
    
    private (string, int) GetUpdatedSecondSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount)
    {
        return GetUpdatedClockSpinnerValues(currentUnit, oldUnit, fullRotationCount, 60);
    }
    private (string, int) GetUpdatedMinuteSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount)
    {
        return GetUpdatedClockSpinnerValues(currentUnit, oldUnit, fullRotationCount, 3600);
    }
    private (string, int) GetUpdatedHourSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount)
    {
        return GetUpdatedClockSpinnerValues(currentUnit, oldUnit, fullRotationCount, 86400);
    }

    private (string, int) GetUpdatedClockSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount, int maxUnits)
    {
        var updatedFullRotationCount = fullRotationCount;
        if (currentUnit - oldUnit == (maxUnits - 1) * -1)
        {
            updatedFullRotationCount++;
        }
        
        var newSpinnerValue = GetRotationValueFromUnit(currentUnit + updatedFullRotationCount * maxUnits, maxUnits);
        
        return (newSpinnerValue, updatedFullRotationCount);
    }

    private string GetRotationValueFromUnit(float unit, int unitsInRotation)
    {
        var degreeValue = unit * (360f  /  unitsInRotation);
        return $"{degreeValue}deg";
    }

    protected override void OnInitialized()
    {
        hideAnimations = true;
        Tick(this);
        StateHasChanged();
        hideAnimations = false;
        updateTimer = new Timer(Tick, null, 0, 1000);        
    }

    private void Tick(object _)
    {
        UpdateAbsoluteClockRotation();
        // UpdateClockRotation();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }
}