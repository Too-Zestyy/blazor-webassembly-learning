@using System.Diagnostics
<div>
    <h3>Clock</h3>

    <div class="clock">
        <div 
            class="
                    clock-minute-face
                    @(hideAnimationsForSeconds ? "no-transition" : "")
                " 
            style="
                transform: rotate(@curSecondRotation)
                
            "
            >
            @* <p>1</p> *@
            @* <p>2</p> *@
            <ul>
                <li>1</li>
                <li>2</li>
                <li>3</li>
                <li>4</li>
                <li>5</li>
                <li>6</li>
                <li>7</li>
                <li>8</li>
                <li>9</li>
                <li>10</li>
                <li>11</li>
                <li>12</li>
            </ul>
        </div>
        <div class="clock-minute-face" style="transform: rotate(@curMinuteRotation)"></div>
    </div>
</div>

@code {
    string currentTime;    
    Timer updateTimer;

    string curSecondRotation = "0deg";
    string curMinuteRotation = "0deg";
    
    int secondsElapsed = 0;
    float minutesElapsed = 0;

    int curSecond = 0;
    int curMinute = 0;

    int fullTurns = 0;
    
    bool hideAnimationsForSeconds = true;

    private void UpdateAbsoluteClockRotation()
    {
        var curTime = DateTime.Now;
        
        // Prevents broken transition from last rotation before full rotation -> 0 degrees
        if (curTime.Second - curSecond == -59)
        {
            fullTurns++;
        }
        curSecondRotation = GetRotationValueFromSixtieth(curTime.Second + fullTurns * 60);

        curSecond = curTime.Second;
    }

    private string GetRotationValueFromUnit(float unit, int unitsInRotation)
    {
        var degreeValue = unit * (360f  /  unitsInRotation);
        return $"{degreeValue}deg";
    }
    private string GetRotationValueFromSixtieth(float unit)
    {
        return GetRotationValueFromUnit(unit, 60);
    }

    // private void UpdateClockRotation()
    // {
    //
    //     if (secondsElapsed == 0)
    //     {
    //         secondsElapsed = DateTime.Now.Second;
    //     } else
    //     {
    //         secondsElapsed += 1;
    //     }
    //
    //     if (minutesElapsed == 0)
    //     {
    //         minutesElapsed = DateTime.Now.Minute;
    //     } else
    //     {
    //         minutesElapsed += 1 / 60f;
    //     }
    //     
    //     curSecondRotation = $"{secondsElapsed*6}deg";
    //     curMinuteRotation = $"{minutesElapsed*6}deg";
    // }

    private void InitialiseSeconds()
    {
        var curTime = DateTime.Now;
        hideAnimationsForSeconds = true;
        curSecondRotation = GetRotationValueFromSixtieth(curTime.Second);
        StateHasChanged();
        hideAnimationsForSeconds = false;
    }

    protected override void OnInitialized()
    {
        // TODO: Prevent animation when setting up, then enable once done
        InitialiseSeconds();
        Tick(this);
        hideAnimationsForSeconds = false;
        updateTimer = new Timer(Tick, null, 0, 1000);        
    }

    private void Tick(object _)
    {
        UpdateAbsoluteClockRotation();
        // UpdateClockRotation();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }
}