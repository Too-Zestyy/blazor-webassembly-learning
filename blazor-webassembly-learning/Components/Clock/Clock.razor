@using System.Diagnostics
<div>
    <h3>Clock</h3>

    <div class="clock">
        <div 
            class=" clock-minute-face@(hideAnimations ? " no-transition" : "")" 
            style="
                transform: rotate(@curSecondRotation)
                
            "
            >
            @* <p>1</p> *@
            @* <p>2</p> *@
            <ul>
                <li>1</li>
                <li>2</li>
                <li>3</li>
                <li>4</li>
                <li>5</li>
                <li>6</li>
                <li>7</li>
                <li>8</li>
                <li>9</li>
                <li>10</li>
                <li>11</li>
                <li>12</li>
            </ul>
        </div>
        <div class="clock-minute-face@(hideAnimations ? " no-transition" : "")" 
             style="transform: rotate(@curMinuteRotation)"></div>
        <div class="clock-minute-face@(hideAnimations ? " no-transition" : "")" 
             style="transform: rotate(@curHourRotation)"></div>
    </div>
</div>

@code {  
    Timer updateTimer;

    string curSecondRotation = "0deg";
    string curMinuteRotation = "0deg";
    string curHourRotation = "0deg";

    int lastSecond = 0;
    int lastMinute = 0;
    int lastHour = 0;

    int fullSecondTurns = 0;
    int fullMinuteTurns = 0;
    int fullHourTurns = 0;
    
    bool hideAnimations = true;

    private void UpdateAbsoluteClockRotation()
    {
        var curTime = DateTime.Now;
        
        (curSecondRotation, fullSecondTurns) = GetUpdatedSecondSpinnerValues(
            curTime.Second, 
            lastSecond, 
            fullSecondTurns
            );
        
        (curMinuteRotation, fullMinuteTurns) = GetUpdatedMinuteSpinnerValues(
            curTime.Minute * 60 + curTime.Second, 
            lastMinute, 
            fullMinuteTurns
            );
        (curHourRotation, fullHourTurns) = GetUpdatedHourSpinnerValues(
            curTime.Hour * 3600 + curTime.Minute * 60 + curTime.Second, 
            lastMinute, 
            fullMinuteTurns
        );

        lastSecond = curTime.Second;
    }
    
    private (string, int) GetUpdatedHourSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount)
    {
        return GetUpdatedClockSpinnerValues(currentUnit, oldUnit, fullRotationCount, 86400);
    }
    private (string, int) GetUpdatedMinuteSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount)
    {
        return GetUpdatedClockSpinnerValues(currentUnit, oldUnit, fullRotationCount, 3600);
    }
    private (string, int) GetUpdatedSecondSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount)
    {
        return GetUpdatedClockSpinnerValues(currentUnit, oldUnit, fullRotationCount, 60);
    }

    private (string, int) GetUpdatedClockSpinnerValues(int currentUnit, int oldUnit, int fullRotationCount, int maxUnits)
    {
        var updatedFullRotationCount = fullRotationCount;
        if (currentUnit - oldUnit == (maxUnits - 1) * -1)
        {
            updatedFullRotationCount++;
        }
        
        var newSpinnerValue = GetRotationValueFromUnit(currentUnit + updatedFullRotationCount * maxUnits, maxUnits);
        
        return (newSpinnerValue, updatedFullRotationCount);
    }

    private string GetRotationValueFromUnit(float unit, int unitsInRotation)
    {
        var degreeValue = unit * (360f  /  unitsInRotation);
        return $"{degreeValue}deg";
    }
    private string GetRotationValueFromSixtieth(float unit)
    {
        return GetRotationValueFromUnit(unit, 60);
    }

    protected override void OnInitialized()
    {
        // TODO: Prevent animation when setting up, then enable once done
        hideAnimations = true;
        Tick(this);
        StateHasChanged();
        hideAnimations = false;
        updateTimer = new Timer(Tick, null, 0, 1000);        
    }

    private void Tick(object _)
    {
        UpdateAbsoluteClockRotation();
        // UpdateClockRotation();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }
}