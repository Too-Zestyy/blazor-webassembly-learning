//:root {
//  --minute-rotation: 0deg;
//}
$inner-face-diameter: 30%;

$clock-hand-separator-colour: rgba(0, 0, 0, 100%);

$clock-face-colour: rgb(30, 30, 30);

$clock-backing-colour: rgb(20, 20, 20);

$clock-case-colour: lightgrey;



ul {
  list-style: none;
}

.clock-shell {
  aspect-ratio: 1;
  width: 50%;
  background-color: lightgrey;
  background-image: linear-gradient(0deg, grey, rgb(220, 220, 220));
  border-radius: 100%;
}

.clock {
  font-family: "Chivo Mono", monospace;
  font-optical-sizing: auto;
  font-weight: normal;
  font-style: normal;
  background-color: $clock-backing-colour;
  
  
  
  display: grid;
  
  align-items: center;
  justify-items: center;
  
  
  // TODO
  mask: url("img/watch-glass-cover.svg");
  mask-size: contain;
}

.clock * {
  grid-row: 1;
  grid-column: 1;
  //align-self: center;
}

.minute-face {
  z-index: 3;
}

.hour-face {
  z-index: 2;
}

@mixin clock-hand {
  transition: all 0.066s cubic-bezier(0.25,0.10,0.36,1.65);
  aspect-ratio: 1;
}

.no-transition {
  transition: none !important;
}

@mixin small-clock-element {
  @include clock-hand;
  width: 20%;
}

@mixin medium-clock-element {
  width: 40%;
}

.clock-hand-separator {
  z-index: 4;
  width: 100%;
  border-radius: 100%;
  aspect-ratio: 1;
  // TODO: Complete gradient to match glass cover on watch  
  background-image: radial-gradient(
                  $clock-hand-separator-colour 17%, 
                  transparent 0, transparent 21%,
                  $clock-hand-separator-colour 0, $clock-hand-separator-colour 29%,
                  transparent 0, transparent 41.5%,
                  $clock-hand-separator-colour 0, $clock-hand-separator-colour 48.5%,
                  transparent 0, transparent 61%,
                  $clock-hand-separator-colour 0, $clock-hand-separator-colour 100%,
                  
  );
}

// TODO: Decouple element sizing from parent - look into removing clock element?
.clock-circular-face {
    @include small-clock-element;
  
    border-radius: 100%;
    background-color: $clock-face-colour;
  
  aspect-ratio: 1;

    width: $inner-face-diameter;
}

.block-clock-face {
  @include medium-clock-element;
  
  display: flex;
  align-items: center;
  justify-content: center;
  
  width: 100%;
  height: 100%;
  
}

.block-clock-face .block-clock-hand {
  width: 1%;
  height: 100%;
  background-image: linear-gradient(
                  180deg, transparent 20%, 
                  white 0, white 50%, 
                  black 0, black 80%, 
                  white 0, white 95%,
                  transparent 0, transparent 100%
  );
}


.clock ul {
  text-align: center;
}

$number-width: 25%;

.clock ul li {
  display: block;
  position: absolute;
  text-align: center;
  width: $number-width; 
  aspect-ratio: 1;
  align-content: center;
  justify-content: center;

  color: white;
  font-size: 0.75vw;
}

.inner-hour-labels ul {
  width: 100%;
  aspect-ratio: 1;
}

.inner-hour-labels ul li {
  width: 10%;
}

// TODO: Refactor clock placement labels into single mixin with bool for inversion


/// Mixin to place items on a circle
/// @author Violet Steers
/// @param {Integer} $label-count - Number of items on the circle
/// @param {Length} $label-width - The width of the elements to be placed on the circle (all elements are expected to have identical widths)
/// @param {Length} $circle-diameter - The diameter of the circle to place elements along the perimeter of
/// @param {Boolean} $relative-label-rotation - Rotates each element relative to its point along the circle's perimeter
/// @param {Boolean} $invert-placement-order - places elements in the opposite direction as normal. Useful when 
///    the point to read a clock face is denoted by a certain point, with the face rotating to move the correct figure into view.
/// @param {Angle} $placement-angle-offset - The point at which elements begin to be placed from.
@mixin place-clock-labels($label-count: 12, $label-width: 20%, $circle-diameter: 45%, 
                          $relative-label-rotation: false, $invert-placement-order: false,
                          $placement-angle-offset: 0deg) {
  
  
  transform: rotate($placement-angle-offset);
  
  @for $i from 1 through $label-count {
    // Guarantee variable existence in a way sass likes
    $li-index: $i;

    // When inverted, place from second to last item to first, 
    // looping back to the final item to be placed last
    @if ($invert-placement-order == true) {
      $li-index: ($label-count - $i);
      @if ($li-index == 0) {
        $li-index: $label-count;
      }
    } 
    @else {
      $li-index: $i - $label-count / 2;

      @if ($li-index <= 0) {
        $li-index: $label-count + $li-index;
      }
    }
    
    ul li:nth-child(#{$li-index}) {
      $clock-element-placement-angle: calc((pi / (#{$label-count} / 2)) * (#{$i}));
      
      /* Find where in the circle to place the element, Circle radius and constant offset */
      /* 1 degree offset for placement */
      bottom: calc(((
      (cos($clock-element-placement-angle) 
      * #{$circle-diameter}) * -1)

      + (50% - (#{$label-width} / 2))));

      left: calc(((
      (sin($clock-element-placement-angle) 
      * #{$circle-diameter}) * -1)
      
      + (50% - (#{$label-width} / 2))));

      @if ($relative-label-rotation != false) {
        transform: rotate(calc((calc(360deg / #{$label-count}) * #{$i}) + #{$relative-label-rotation} + 180deg));
      }
    }
  }
}

// TODO: Modify mixin usage to explicitly state arg names for readability

.clock-circular-face {
  @include place-clock-labels(
                  12, $number-width, 45%, 180deg, true
  );
}

.central-hour-labels {
  z-index: 5;
  
  //font-family: "Encode Sans Condensed", sans-serif;
  //font-style: normal;

  width: 60%;
  aspect-ratio: 1;
}

.outer-hour-labels {
  @extend .central-hour-labels;
  width: 100%;
}

.central-hour-labels ul li, .outer-hour-labels ul li {
  font-size: 1.2vw;
}

.clock-central-hour-labels {
  @include place-clock-labels(
                  12, $number-width, 53.25%, 180deg, false, 0deg
  );
}

.clock-outer-hour-labels {
  @include place-clock-labels(
                  12, $number-width, 46%, 180deg, false, 180deg
  );
}