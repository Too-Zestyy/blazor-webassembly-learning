//:root {
//  --minute-rotation: 0deg;
//}
$inner-face-diameter: 30%;

$clock-hand-separator-colour: rgba(0, 0, 0, 100%);

$clock-face-colour: rgb(30, 30, 30);

$clock-backing-colour: rgb(20, 20, 20);

$clock-case-colour: lightgrey;



ul {
  list-style: none;
}

.clock-shell {
  aspect-ratio: 1;
  width: 50%;
  background-color: lightgrey;
  background-image: linear-gradient(0deg, grey, rgb(220, 220, 220));
  border-radius: 100%;
}

.clock {
  font-family: "Chivo Mono", monospace;
  font-optical-sizing: auto;
  font-weight: normal;
  font-style: normal;
  background-color: $clock-backing-colour;
  
  
  
  display: grid;
  
  align-items: center;
  justify-items: center;
  
  
  // TODO
  //mask: url("img/watch-glass-cover-n.svg");
  //mask-size: contain;
  
  //clip: ;
  //clip-path: path("m 0.26499999,0.133 a 0.13249999,0.13249999 0 0 1 -0.06625,0.11474836 0.13249999,0.13249999 0 0 1 -0.1325,0 A 0.13249999,0.13249999 0 0 1 0,0.133");
  
}

.clock * {
  grid-row: 1;
  grid-column: 1;
  //align-self: center;
}

.minute-face {
  z-index: 3;
}

.hour-face {
  z-index: 2;
}

@mixin clock-hand {
  transition: all 0.066s cubic-bezier(0.25,0.10,0.36,1.65);
  aspect-ratio: 1;
}

.no-transition {
  transition: none !important;
}

@mixin small-clock-element {
  @include clock-hand;
  width: 20%;
}

@mixin medium-clock-element {
  width: 40%;
}

.clock-hand-separator {
  z-index: 4;
  width: 100%;
  border-radius: 100%;
  aspect-ratio: 1;
  // TODO: Complete gradient to match glass cover on watch  
  background-image: radial-gradient(
                  $clock-hand-separator-colour 17%, 
                  transparent 0, transparent 21%,
                  $clock-hand-separator-colour 0, $clock-hand-separator-colour 27%,
                  transparent 0, transparent 33%,
                  $clock-hand-separator-colour 0, $clock-hand-separator-colour 40%,
                  transparent 0, transparent 47%,
                  $clock-hand-separator-colour 0, $clock-hand-separator-colour 53%,
                  transparent 0, transparent 100%,
                  
  );
}

// TODO: Decouple element sizing from parent - look into removing clock element?
.clock-circular-face {
    @include small-clock-element;
  
    border-radius: 100%;
    background-color: $clock-face-colour;
  
  aspect-ratio: 1;

    width: $inner-face-diameter;
}

.block-clock-face {
  @include medium-clock-element;
  
  display: flex;
  align-items: center;
  justify-content: center;
  
  width: 100%;
  height: 100%;
  
}

.block-clock-face .block-clock-hand {
  width: 1%;
  height: 100%;
  background-image: linear-gradient(
                  0deg, transparent 25%, 
                  white 0, white 50%, 
                  black 0, black 75%, 
                  white 0, white 85%,
                  transparent 0, transparent 100%
  );
}


.clock ul {
  text-align: center;
}

$number-width: 25%;

.clock ul li {
  display: block;
  position: absolute;
  text-align: center;
  width: $number-width; 
  aspect-ratio: 1;
  align-content: center;
  justify-content: center;

  color: white;
  font-size: 0.75vw;
}

.inner-hour-labels ul {
  width: 100%;
  aspect-ratio: 1;
}

.inner-hour-labels ul li {
  width: 10%;
}

// TODO: Refactor clock placement labels into single mixin with bool for inversion


@mixin place-clock-labels($label-count: 12, $label-width: 20%, $circle-radius: 45%, $relative-label-rotation: false, $invert-placement-order: false) {
  
  
  transform: rotate(0deg);
  
  @for $i from 1 through $label-count {
    // Guarantee variable existence in a way sass likes
    $li-index: $i;

    // When inverted, place from second to last item to first, 
    // looping back to the final item to be placed last
    @if ($invert-placement-order == true) {
      $li-index: ($label-count - $i);
      @if ($li-index == 0) {
        $li-index: $label-count;
      }
    } 
    @else {
      $li-index: $i - $label-count / 2;

      @if ($li-index <= 0) {
        $li-index: $label-count + $li-index;
      }
    }
    
    ul li:nth-child(#{$li-index}) {
      $clock-element-placement-angle: calc((pi / (#{$label-count} / 2)) * (#{$i}));
      
      /* Find where in the circle to place the element, Circle radius and constant offset */
      /* 1 degree offset for placement */
      bottom: calc(((
      (cos($clock-element-placement-angle) 
      * #{$circle-radius}) * -1)

      + (50% - (#{$label-width} / 2))));

      left: calc(((
      (sin($clock-element-placement-angle) 
      * #{$circle-radius}) * -1)
      
      + (50% - (#{$label-width} / 2))));

      @if ($relative-label-rotation != false) {
        transform: rotate(calc((calc(360deg / #{$label-count}) * #{$i}) + #{$relative-label-rotation} + 180deg));
      }
    }
  }
}

// TODO: Modify mixin usage to explicitly state arg names for readability

.clock-circular-face {
  @include place-clock-labels(
                  12, $number-width, 45%, 180deg, true
  );
}

.clock-central-hour-labels {
  @include place-clock-labels(
                  12, $number-width, 43%, 180deg, false
  );
}


.central-hour-labels {
  z-index: 5;
  
  width: 60%;
  aspect-ratio: 1;
}

//.central-hour-labels ul li {
//  width: ;
//}

//.inner-hour-labels, .outer-hour-labels {
//  z-index: 5;
//}
//
//.inner-hour-labels {
//  width: 50%;
//  aspect-ratio: 1;
//}
//
//
//
//@include place-inverted-clock-labels(inner-hour-labels, 6, 2%, 10%, 180deg);

//@for $i from 1 through 12 {
//  .clock-circular-face ul li:nth-child(#{$i}){
//    color: white;
//    @if($i % 3 == 0) {
//      font-size: 13px; 
//    } @else {
//      font-size: 10px;
//    }
//
//  }
//}